plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.7'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.flywaydb.flyway' version '10.18.2'
	id 'nu.studer.jooq' version '9.0'  // JOOQ 코드 생성을 위한 플러그인
}

group = 'com.spring'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'com.h2database:h2'

	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	jooqGenerator 'org.jooq:jooq-meta-extensions:'  + dependencyManagement.importedProperties['jooq.version']
	jooqGenerator 'com.h2database:h2'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

flyway {
	url = "jdbc:h2:file:${projectDir}/build/data/test;"
	user = 'sa'
	password = 'test'
	schemas = ['PUBLIC']  // H2 에서는 대문자 사용
}

jooq {
	version = dependencyManagement.importedProperties['jooq.version']
	edition = nu.studer.gradle.jooq.JooqEdition.OSS

	configurations {
		main {
			generateSchemaSourceOnCompilation = true // default

			generationTool {
				logging = org.jooq.meta.jaxb.Logging.WARN
				jdbc {
					driver = 'org.h2.Driver'
					url = "jdbc:h2:file:${projectDir}/build/data/test;"
					user = 'sa'
					password = 'test'
					properties {
						property {
							key = 'PAGE_SIZE'
							value = '2048'
						}
					}
				}
				generator {
					name = 'org.jooq.codegen.DefaultGenerator'
					database {
						name = 'org.jooq.meta.h2.H2Database'
						inputSchema = 'PUBLIC'
						forcedTypes {
							forcedType {
								name = 'varchar'
								includeExpression = '.*'
								includeTypes = 'JSONB?'
							}
							forcedType {
								name = 'varchar'
								includeExpression = '.*'
								includeTypes = 'INET'
							}
						}
					}
					generate {
						deprecated = false
						records = true
						immutablePojos = true
						fluentSetters = true
						javaTimeTypes = true
					}
					target {
						packageName = 'com.spring.jooq'
						directory = 'build/generated-src/jooq/main' // default
					}
					strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
				}
			}
		}
	}
}

/*tasks.named('test') {
	useJUnitPlatform()
}*/
